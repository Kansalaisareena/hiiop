* hiiop

** TODO Overview

** Dependencies
   - PostgreSQL
   - Redis
   - sassc
   - leiningen

** Development setup

   Create a postgres dabase called `hiiop_dev`, and make your postgres user have
   ownership over the database.

   Remember to update `YOUR_DB_USER` in `:database-url` to reflect your database
   user name in the next step.

   Make sure you have redis installed and redis-server is running in
   `127.0.0.1:6379`.

** Secrets

   Create profiles.clj under your git root to place the secrets.
   #+BEGIN_SRC clojure
   {:profiles/dev
    {:env
     {:database-url "postgresql://localhost/hiiop_dev?user=YOUR_DB_USER"
      :timezone "Europe/Helsinki"
      :site-base-url ""

      :sender-address  ""
      :smtp-server     ""
      :smtp-port       ""
      :smtp-user       ""
      :smtp-password   ""

      :redis
      {:uri ""}
      :hiiop-pictures-bucket
      "hiiop-dev-pictures"
      :hiiop-pictures-bucket-base-url
      "http://hiiop-dev-pictures.s3-website-eu-west-1.amazonaws.com"
      :aws-access-key-id
      ""
      :aws-secret-access-key
      ""
      :contentful
      {:cd-api-key ""
       :space-id ""
       :webhook-user ""
       :webhook-password ""
       }
      }
      :hiiop-blog-bucket "hiiop-dev-blog"
      :hiiop-bucket "hiiop-dev"
      :hiiop-blog-base-url "http://hiiop-dev-blog.s3-website.eu-central-1.amazonaws.com"

      :analytics-script "script src"

      ;; these are used for testing static site generator in
      ;; local development
      ;; :asset-base-url "http://localhost:3000"
      ;; :hiiop-blog-base-url "http://hiiop-local-dev-blog.s3-website-eu-west-1.amazonaws.com"
      ;; :hiiop-blog-bucket "hiiop-local-dev-blog"

      :social
      {:facebook-app-id "180814445730558"
       :twitter-account "hiiop100"
       :twitter-site "https://www.hiiop100.fi"}
      }}
    :profiles/test
    {:env
     {:database-url "postgresql://localhost/hiiop_test?user=youruser"
      :timezone "Europe/Helsinki"}}}}
   #+END_SRC

*** Dev environment authentication
    To add http basic auth for dev environment, add the following to
    the env:

    #+BEGIN_SRC clojure
      :http-simple-credentials {:username "dev-username" :password "dev-password"}
    #+END_SRC

** Migrations
   Manage migrations with the following commands:

   #+BEGIN_EXAMPLE
   # apply migration
   lein migratus migrate

   # run down for previous migration
   lein migratus rollback

   # create new migration
   lein migratus create <migration_name>
   #+END_EXAMPLE

   [[https://github.com/yogthos/migratus][more about migratus]]

** Compile Sass:

** Development
   To get an interactive development environment run:

   #+BEGIN_EXAMPLE
   lein run
   lein figwheel
   #+END_EXAMPLE

   Make sure you have sassc installed. Sass can be compiled using one of these 2
   commands:

   #+BEGIN_EXAMPLE
   lein sassc once
   # OR
   sassc resources/scss/screen.scss > resources/public/css/screen.css
   #+END_EXAMPLE


   and open your browser at [[http://localhost:3000/][localhost:3000]].
   This will auto compile and send all changes to the browser without the
   need to reload. After the compilation process is complete, you will
   get a Browser Connected REPL. An easy way to try it is:

   #+BEGIN_EXAMPLE
   (js/alert "Am I connected?")
   #+END_EXAMPLE

   and you should see an alert in the browser window.

   To clean all compiled files:

   #+BEGIN_EXAMPLE
   lein clean
   #+END_EXAMPLE

   To create a production build run:

   #+BEGIN_EXAMPLE
   lein do clean
   cljsbuild once min
   #+END_EXAMPLE

   And open your browser in `resources/public/index.html`. You will not
   get live reloading, nor a REPL.

** Running tests
   You can run all the tests from the command line with the =lein
   test= but it's horribly slow. A faster way to run tests is to run
   them from the repl in the following way:

   #+BEGIN_EXAMPLE
   (require '[clojure.test :refer [run-tests]])
   (require 'hiiop.test.specific.test)
   (run-tests 'hiiop.test.specific.test)
   #+END_EXAMPLE

** Notice

*** Translations
    When dealing with translations you have reload the files manually
    in your clj repl to see the changes:

    #+BEGIN_EXAMPLE
    (use 'hiiop.translate :reload)
    (restart)
    #+END_EXAMPLE

** Deployments
   - Done using Circle CI
     + https://circleci.com/gh/futurice/hiiop
     + See [[https://github.com/futurice/hiiop/blob/master/circle.yml][circle.yml]]
   - App itself is hosted in Heroku
     + =HEROKU_APP= environment variable used to define where to deploy
     + =DATABASE_URL= is used to determine the database and user to use
     + =ASSET_BASE_URL= is used to determine which URL to use before the assets
     + =HIIOP_PICTURES_BUCKET= is used as S3 file upload target
     + =HIIOP_PICTURES_BUCKET_BASE_URL= is used to refer to the uploaded pictures
   - ASSETS are hosted in S3
     + =HIIOP_ASSET_BUCKET= environment variable is used to determine
       which bucket to use
     + =AWS_ACCESS_KEY_ID= and =AWS_SECRET_ACCESS_KEY= environment
       variables can be used to define the user used to authenticate to AWS
     + Git revision is used to version the assets

** TODO License
